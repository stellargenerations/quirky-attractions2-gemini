---
layout: layout.njk
pagination:
    data: attractions # Use the data fetched in _data/attractions.js
    size: 1          # Create one page per item in the 'attractions' array
    alias: attraction # Each item will be available as 'attraction' in this template
    addAllPagesToCollections: true # Optional: makes these pages available in collections
# Create a URL directly at the root level for flat structure
permalink: "{{ attraction.slug }}/index.html"
# Set the title and breadcrumb for each generated page
eleventyComputed:
  title: "{{ attraction.name }}"
  breadcrumbTitle: "{{ attraction.name }}"
  breadcrumbAttraction: "{{ attraction.name }}" # Pass attraction name for breadcrumb logic
  breadcrumbAttractionSlug: "{{ attraction.slug }}" # Pass slug for linking back if needed
  description: "Learn more about {{ attraction.name }}, a quirky attraction located in {{ attraction.locationCity }}, {{ attraction.state }}."
---

<article class="attraction-detail container">
    <h2>{{ attraction.name }}</h2>

    <div class="attraction-meta">
        <span class="location">Location: {{ attraction.locationCity }}, {{ attraction.state }}</span>
        {% if attraction.categories.length %}
        <span class="categories">Categories:
            {% for category in attraction.categories %}
                {# Link back to the category page with flat URL structure #}
                <a href="/category-{{ category | slugify }}/">{{ category }}</a>{% if not loop.last %}, {% endif %}
            {% endfor %}
        </span>
        {% endif %}
    </div>

    <figure class="attraction-image">
        <img src="{{ attraction.imageUrl }}" alt="{{ attraction.imageAlt }}" loading="lazy" onerror="this.style.display='none'; this.nextElementSibling.style.display='block';">
        <figcaption style="display: none; color: red;">Image failed to load.</figcaption> {# Error message #}
    </figure>

    <div class="attraction-description">
        <h3>About {{ attraction.name }}</h3>
        <p>{{ attraction.description | safe }}</p> {# Use safe filter if description might contain HTML #}
    </div>

    {% if attraction.websiteLink %}
    <div class="attraction-website">
        <a href="{{ attraction.websiteLink }}" target="_blank" rel="noopener noreferrer">Visit Website</a>
    </div>
    {% endif %}

    {# Related attractions section #}
    <div class="related-attractions">
        <h3>More Attractions in {{ attraction.state }}</h3>
        <div class="related-links">
            {% set count = 0 %}
            {% for related in attractions %}
                {% if related.state == attraction.state and related.slug != attraction.slug and count < 5 %}
                    <a href="/{{ related.slug }}/">{{ related.name }}</a>{% if not loop.last and count < 4 %} | {% endif %}
                    {% set count = count + 1 %}
                {% endif %}
            {% endfor %}
            
            {% if count == 0 %}
                <p>No other attractions found in this state.</p>
            {% endif %}
        </div>
        
        {% if attraction.categories.length > 0 %}
        <h3>Similar {{ attraction.categories[0] }} Attractions</h3>
        <div class="related-links">
            {% set count = 0 %}
            {% for related in attractions %}
                {% if related.slug != attraction.slug and related.categories.includes(attraction.categories[0]) and count < 5 %}
                    <a href="/{{ related.slug }}/">{{ related.name }}</a>{% if not loop.last and count < 4 %} | {% endif %}
                    {% set count = count + 1 %}
                {% endif %}
            {% endfor %}
            
            {% if count == 0 %}
                <p>No similar attractions found.</p>
            {% endif %}
        </div>
        {% endif %}
    </div>

    {# Optional: Add a small map showing just this location #}
    {# <div id="single-location-map" style="height: 300px; margin-top: 20px;"></div> #}
    {# <script> #}
    {#  // Basic Leaflet map initialization for single location #}
    {#  var map = L.map('single-location-map').setView([{{ attraction.lat }}, {{ attraction.lon }}], 13); #}
    {#  L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', { #}
    {#      maxZoom: 19, #}
    {#      attribution: '&copy; <a href="http://www.openstreetmap.org/copyright">OpenStreetMap</a>' #}
    {#  }).addTo(map); #}
    {#  L.marker([{{ attraction.lat }}, {{ attraction.lon }}]).addTo(map) #}
    {#      .bindPopup("{{ attraction.name | replace('"', '\\"') }}").openPopup(); #}
    {# </script> #}

</article>